Adjunto el codigo completo:

directorio:
ğŸ“¦src
 â”£ ğŸ“‚controllers
 â”ƒ â”£ ğŸ“œbusiness.controller.js
 â”ƒ â”£ ğŸ“œorders.controller.js
 â”ƒ â”— ğŸ“œusers.controller.js
 â”£ ğŸ“‚dao
 â”ƒ â”£ ğŸ“‚classes
 â”ƒ â”ƒ â”£ ğŸ“œbusiness.dao.js
 â”ƒ â”ƒ â”£ ğŸ“œorder.dao.js
 â”ƒ â”ƒ â”— ğŸ“œuser.dao.js
 â”ƒ â”— ğŸ“‚models
 â”ƒ â”ƒ â”£ ğŸ“œbusiness.model.js
 â”ƒ â”ƒ â”£ ğŸ“œorder.model.js
 â”ƒ â”ƒ â”— ğŸ“œuser.model.js
 â”£ ğŸ“‚routes
 â”ƒ â”£ ğŸ“œbusiness.router.js
 â”ƒ â”£ ğŸ“œorders.router.js
 â”ƒ â”— ğŸ“œusers.router.js
 â”— ğŸ“œapp.js


src/app.js
import express from 'express'
import cors from 'cors'
import usersRouter from './routes/users.router.js'
import ordersRouter from './routes/orders.router.js'
import businessRouter from './routes/business.router.js'
import mongoose from 'mongoose'

const app = express()
const PORT = 8080

const connection = mongoose.connect('mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/clase13_EntregaFinal?retryWrites=true&w=majority&appName=Cluster0')

app.use(cors())
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

app.use('/api/users', usersRouter)
app.use('/api/business', businessRouter)
app.use('/api/orders', ordersRouter)

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`)
})









src/controllers/business.controller.js
import Business from '../dao/classes/business.dao.js'
import mongoose from 'mongoose';

const businessService = new Business()

export const getBusiness = async (req, res) => {
    let result = await businessService.getBusiness()
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const getBusinessById = async (req, res) => {
    const { bid } = req.params
    let result = await businessService.getBusinessById(bid)
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const createBusiness = async (req, res) => {
    const business = req.body
    let result = await businessService.saveBusiness(business)
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const addProduct = async (req, res) => {
    let product = req.body;
    product.id = new mongoose.Types.ObjectId();
    let business = await businessService.getBusinessById(req.params.bid);

    business.products.push(product);
    await businessService.updateBusiness(business._id, business);

    res.send({ status: "success", result: "Business updated" });
};












src/controllers/orders.controller.js
import Order from '../dao/classes/order.dao.js';
import Business from '../dao/classes/business.dao.js';
import User from '../dao/classes/user.dao.js';

const usersService = new User();
const ordersService = new Order();
const businessService = new Business();

export const getOrders = async (req, res) => {
    const orders = await ordersService.getOrders();
    res.send({ status: "success", orders });
};

export const getOrderById = async (req, res) => {
    const { id } = req.params;
    const order = await ordersService.getOrderById(id);

    if (!order) {
        return res.status(404).send({ status: "error", error: "Order not found" });
    }

    res.send({ status: "success", order });
};

export const createOrder = async (req, res) => {
    const { userId, businessId, productIds } = req.body;

    // Validaciones
    if (!Array.isArray(productIds) || productIds.length === 0) {
        return res.status(400).send({ status: "error", error: "Product IDs must be a non-empty array" });
    }

    const resultBusiness = await businessService.getBusinessById(businessId);
    const resultUser = await usersService.getUserById(userId);

    if (!resultBusiness || !resultUser) {
        return res.status(400).send({ status: "error", error: "User or Business not found" });
    }

    const actualOrders = resultBusiness.products.filter(product => productIds.includes(product.id.toString()));

    if (!actualOrders.length) {
        return res.status(400).send({ status: "error", error: "No valid products found" });
    }

    let orderProducts = [];
    let totalPrice = 0;

    actualOrders.forEach(product => {
        let existingProduct = orderProducts.find(p => p.id === product.id);
        if (existingProduct) {
            existingProduct.quantity += 1;
        } else {
            orderProducts.push({
                id: product.id,
                name: product.name,
                price: product.price,
                quantity: 1
            });
        }
        totalPrice += product.price;
    });

    let orderNumber = Date.now() + Math.floor(Math.random() * 10000 + 1);

    let order = {
        number: orderNumber,
        business: businessId,
        user: userId,
        products: orderProducts,
        totalPrice,
        status: "pending"
    };

    try {
        let orderResult = await ordersService.createOrder(order);
        resultUser.orders.push(orderResult._id);

        if (!await usersService.updateUser(userId, resultUser)) {
            return res.status(500).send({ status: "error", error: "Failed to update user" });
        }

        res.send({ status: "success", order: orderResult });
    } catch (error) {
        res.status(500).send({ status: "error", error: "Failed to create order" });
    }
};

export const resolveOrder = async (req, res) => {
    const { id } = req.params;

    const order = await ordersService.getOrderById(id);

    if (!order) {
        return res.status(404).send({ status: "error", error: "Order not found" });
    }

    order.status = "resolved";

    await ordersService.updateOrder(order._id, order);
    res.send({ status: "success", order });
};

















src/controllers/users.controller.js
import User from '../dao/classes/user.dao.js';

const usersService = new User();

export const getUsers = async (req, res) => {
    let result = await usersService.getUsers();
    res.send({ status: "success", result });
};

export const getUserById = async (req, res) => {
    const { uid } = req.params;

    const user = await usersService.getUserById(uid);

    if (!user) {
        return res.status(404).send({ status: "error", error: "User not found" });
    }

    res.send({ status: "success", user });
};


export const saveUser = async (req, res) => {
    const user = req.body;
    let result = await usersService.saveUser(user);
    res.send({ status: "success", result });
};




















src/dao/classes/business.dao.js
import businessModel from '../models/business.model.js'

export default class Business {
    getBusiness = async () => {
        try {
            let result = await businessModel.find()
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    getBusinessById = async (id) => {
        try {
            let result = await businessModel.findOne({ _id: id })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    saveBusiness = async (business) => {
        try {
            let result = await businessModel.create(business)
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    updateBusiness = async (id, business) => {
        try {
            let result = await businessModel.updateOne({ _id: id }, { $set: business })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }
}














src/dao/classes/order.dao.js
import ordersModel from "../models/order.model.js";

export default class Order {

    getOrders = async () => {
        try {
            let result = await ordersModel.find()
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    getOrderById = async (id) => {
        try {
            let result = await ordersModel.findOne({ _id: id })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    createOrder = async (order) => {
        try {
            let result = await ordersModel.create(order)
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    resolveOrder = async (id, order) => {
        try {
            let result = await ordersModel.updateOne({ _id: id }, { $set: order })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

} 













src/dao/classes/user.dao.js
import usersModel from "../models/user.model.js";

export default class User {
    getUsers = async () => {
        try {
            let users = await usersModel.find();
            return users;
        } catch (error) {
            console.log(error);
            return null;
        }
    };

    getUserById = async (id) => {
        try {
            // Poblamos las Ã³rdenes del usuario y los productos dentro de las Ã³rdenes
            let user = await usersModel.findOne({ _id: id })
                .populate({
                    path: 'orders',  // Poblar las Ã³rdenes
                    populate: {
                        path: 'products.id',  // Poblar los productos dentro de las Ã³rdenes
                        model: 'Product'     // AsegÃºrate de que "Product" es el nombre correcto del modelo
                    }
                });
            return user;
        } catch (error) {
            console.log(error);
            return null;
        }
    };

    saveUser = async (user) => {
        try {
            let result = await usersModel.create(user);
            return result;
        } catch (error) {
            console.log(error);
        }
    };

    updateUser = async (id, user) => {
        try {
            let result = await usersModel.updateOne({ _id: id }, { $set: user });
            return result;
        } catch (error) {
            console.log(error);
        }
    };
}

















src/dao/models/business.model.js
import mongoose from "mongoose";

const collection = "Business";

const schema = new mongoose.Schema({
    name: String,
    products: [{
        id: mongoose.SchemaTypes.ObjectId,
        name: String,
        price: Number
    }]
});

const businessModel = mongoose.model(collection, schema);

export default businessModel;











src/dao/models/order.model.js
import mongoose from "mongoose";

const collection = "Orders"

const orderSchema = new mongoose.Schema({
    number: Number,
    business: { type: mongoose.Schema.Types.ObjectId, ref: 'Business' },
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    products: [{
        id: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
        name: String,
        price: Number,
        quantity: Number
    }],
    totalPrice: Number,
    status: String
});



const orderModel = mongoose.model(collection, orderSchema)

export default orderModel















src/dao/models/user.model.js
import mongoose from "mongoose";

const collection = "Users";

const schema = new mongoose.Schema({
    name: String,
    email: String,
    role: String,
    orders: [
        {
            type: mongoose.Schema.Types.ObjectId, // Usar 'Schema.Types' en lugar de 'SchemaTypes'
            ref: "Order" // Cambiar de "Orders" a "Order"
        }
    ]
});

const userModel = mongoose.model(collection, schema);

export default userModel;














src/routes/business.router.js
import { Router } from "express";
import { getBusiness, getBusinessById, createBusiness, addProduct } from "../controllers/business.controller.js";

const router = Router()

router.get('/', getBusiness)
router.post('/', createBusiness)

router.get('/:bid', getBusinessById)
router.post('/:bid/product', addProduct)

export default router













src/routes/orders.router.js
import { Router } from "express";
import { getOrders, getOrderById, createOrder, resolveOrder } from '../controllers/orders.controller.js';

const router = Router();

router.get('/', getOrders);
router.post('/', createOrder);
router.get('/:oid', getOrderById);
router.put('/:oid', resolveOrder);  // AsegÃºrate de que la funciÃ³n resolveOrder estÃ¡ importada

export default router;















src/routes/users.router.js
import { Router } from "express";
import { getUsers, getUserById, saveUser } from '../controllers/users.controller.js'

const router = Router()

router.get('/', getUsers)
router.get('/:uid', getUserById)
router.post('/', saveUser)

export default router














.gitignore
node_modules


package.json
{
  "name": "arquitectura-completo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node --watch src/app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "mongoose": "^8.3.2"
  }
}


