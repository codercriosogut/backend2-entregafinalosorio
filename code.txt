Adjunto el codigo completo:

directorio:
ðŸ“¦src
 â”£ ðŸ“‚controllers
 â”ƒ â”£ ðŸ“œbusiness.controller.js
 â”ƒ â”£ ðŸ“œorders.controller.js
 â”ƒ â”— ðŸ“œusers.controller.js
 â”£ ðŸ“‚dao
 â”ƒ â”£ ðŸ“‚classes
 â”ƒ â”ƒ â”£ ðŸ“œbusiness.dao.js
 â”ƒ â”ƒ â”£ ðŸ“œorder.dao.js
 â”ƒ â”ƒ â”— ðŸ“œuser.dao.js
 â”ƒ â”— ðŸ“‚models
 â”ƒ â”ƒ â”£ ðŸ“œbusiness.model.js
 â”ƒ â”ƒ â”£ ðŸ“œorder.model.js
 â”ƒ â”ƒ â”— ðŸ“œuser.model.js
 â”£ ðŸ“‚routes
 â”ƒ â”£ ðŸ“œbusiness.router.js
 â”ƒ â”£ ðŸ“œorders.router.js
 â”ƒ â”— ðŸ“œusers.router.js
 â”— ðŸ“œapp.js


src/app.js
import express from 'express'
import cors from 'cors'
import usersRouter from './routes/users.router.js'
import ordersRouter from './routes/orders.router.js'
import businessRouter from './routes/business.router.js'
import mongoose from 'mongoose'

const app = express()
const PORT = 8080

const connection = mongoose.connect('mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/clase13_EntregaFinal?retryWrites=true&w=majority&appName=Cluster0')
app.use(cors())
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

//Routes
app.use('/api/users', usersRouter)
app.use('/api/business', businessRouter)
app.use('/api/orders', ordersRouter)


app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`)
})


src/controllers/business.controller.js
import Business from '../dao/classes/business.dao.js'

const businessService = new Business()

export const getBusiness = async (req, res) => {
    let result = await businessService.getBusiness()
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const getBusinessById = async (req, res) => {
    const { bid } = req.params
    let result = await businessService.getBusinessById(bid)
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const createBusiness = async (req, res) => {
    const business = req.body
    let result = await businessService.saveBusiness(business)
    if (!result) return res.status(500).send({ status: "error", error: "Something went wrong" })
    res.send({ status: "success", result })
}

export const addProduct = async (req, res) => {
    let product = req.body
    let business = await businessService.getBusinessById(req.params.bid)
    business.products.push(product)
    await businessService.updateBusiness(business._id, business)
    res.send({ status: "success", result: "Business updated" })
}



src/controllers/orders.controller.js
import Order from '../dao/classes/order.dao.js'
import Business from '../dao/classes/business.dao.js'
import User from '../dao/classes/user.dao.js'

const usersService = new User()
const ordersService = new Order()
const businessService = new Business()

export const getOrders = async (req, res) => {
    let result = await ordersService.getOrders()
    res.send({ status: "success", result })
}

export const getOrderById = async (req, res) => {
    const { oid } = req.params
    let order = await ordersService.getOrderById(oid)
    res.send({ status: "success", result: order })
}

export const createOrder = async (req, res) => {
    const { user, business, products } = req.body
    const resultUser = await usersService.getUserById(user)
    const resultBusiness = await businessService.getBusinessById(business)
    let actualOrders = resultBusiness.products.filter(product => products.includes(product.id))
    let sum = actualOrders.reduce((acc, prev) => {
        acc += prev.price
        return acc
    }, 0)
    let orderNumber = Date.now() + Math.floor(Math.random() * 10000 + 1)
    let order = {
        number: orderNumber,
        business,
        user,
        products: actualOrders.map(product => product.id),
        totalPrice: sum,
        status: "pending"
    }
    let orderResult = await ordersService.createOrder(order)
    await usersService.updateUser(user, resultUser)
    res.send({ status: "success", orderResult })
}

export const resolveOrder = async (req, res) => {
    const { resolve } = req.query
    let order = await ordersService.getOrderById(req.params.oid)
    order.status = resolve
    await ordersService.resolveOrder(order._id, order)
    res.send({ status: "success", result: "Order resolved" })

}



src/controllers/users.controller.js
import Order from '../dao/classes/order.dao.js'
import Business from '../dao/classes/business.dao.js'
import User from '../dao/classes/user.dao.js'

const usersService = new User()
const ordersService = new Order()
const businessService = new Business()

export const getOrders = async (req, res) => {
    let result = await ordersService.getOrders()
    res.send({ status: "success", result })
}

export const getOrderById = async (req, res) => {
    const { oid } = req.params
    let order = await ordersService.getOrderById(oid)
    res.send({ status: "success", result: order })
}

export const createOrder = async (req, res) => {
    const { user, business, products } = req.body
    const resultUser = await usersService.getUserById(user)
    const resultBusiness = await businessService.getBusinessById(business)
    let actualOrders = resultBusiness.products.filter(product => products.includes(product.id))
    let sum = actualOrders.reduce((acc, prev) => {
        acc += prev.price
        return acc
    }, 0)
    let orderNumber = Date.now() + Math.floor(Math.random() * 10000 + 1)
    let order = {
        number: orderNumber,
        business,
        user,
        products: actualOrders.map(product => product.id),
        totalPrice: sum,
        status: "pending"
    }
    let orderResult = await ordersService.createOrder(order)
    await usersService.updateUser(user, resultUser)
    res.send({ status: "success", orderResult })
}

export const resolveOrder = async (req, res) => {
    const { resolve } = req.query
    let order = await ordersService.getOrderById(req.params.oid)
    order.status = resolve
    await ordersService.resolveOrder(order._id, order)
    res.send({ status: "success", result: "Order resolved" })

}



src/dao/classes/business.dao.js
import businessModel from '../models/business.model.js'

export default class Business {
    getBusiness = async () => {
        try {
            let result = await businessModel.find()
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    getBusinessById = async (id) => {
        try {
            let result = await businessModel.findOne({ _id: id })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    saveBusiness = async (business) => {
        try {
            let result = await businessModel.create(business)
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    updateBusiness = async (id, business) => {
        try {
            let result = await businessModel.updateOne({ _id: id }, { $set: business })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }
}



src/dao/classes/order.dao.js
import ordersModel from "../models/order.model.js";

export default class Order {

    getOrders = async () => {
        try {
            let result = await ordersModel.find()
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    getOrderById = async (id) => {
        try {
            let result = await ordersModel.findOne({ _id: id })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    createOrder = async (order) => {
        try {
            let result = await ordersModel.create(order)
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

    resolveOrder = async (id, order) => {
        try {
            let result = await ordersModel.updateOne({ _id: id }, { $set: order })
            return result
        } catch (error) {
            console.log(error)
            return null
        }
    }

} 



src/dao/classes/user.dao.js
import usersModel from "../models/user.model.js";

export default class User {
    getUsers = async () => {
        try {
            let users = await usersModel.find()
            return users
        } catch (error) {
            console.log(error)
            return null
        }
    }

    getUserById = async (id) => {
        try {
            let user = await usersModel.findOne({ _id: id })
            return user
        } catch (error) {
            console.log(error)
            return null
        }
    }

    saveUser = async (user) => {
        try {
            let result = await usersModel.create(user)
            return result
        } catch (error) {
            console.log(error)
        }
    }

    updateUser = async (id, user) => {
        try {
            let result = await usersModel.updateOne({ _id: id }, { $set: user })
            return result
        } catch (error) {
            console.log(error)
        }
    }
}




src/dao/models/business.model.js
import mongoose from "mongoose";

const collection = "Business"

const schema = new mongoose.Schema({
    name: String,
    products: []
})

const businessModel = mongoose.model(collection, schema)

export default businessModel



src/dao/models/order.model.js
import mongoose from "mongoose";

const collection = "Orders"

const schema = new mongoose.Schema({
    number: Number,
    business: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: "Business"
    },
    user: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: "Users"
    },
    products: [{
        name: String,
        price: Number
    }],
    totalPrice: Number,
    status: { type: String }
})


const orderModel = mongoose.model(collection, schema)

export default orderModel



src/dao/models/user.model.js
import mongoose from "mongoose";

const collection = "Users"

const schema = new mongoose.Schema({
    name: String,
    email: String,
    role: String,
    orders: [
        {
            type: mongoose.SchemaTypes.ObjectId,
            ref: "Orders"
        }
    ]
})

const userModel = mongoose.model(collection, schema)

export default userModel




src/routes/business.router.js
import { Router } from "express";
import { getBusiness, getBusinessById, createBusiness, addProduct } from "../controllers/business.controller.js";

const router = Router()

router.get('/', getBusiness)
router.post('/', createBusiness)

router.get('/:bid', getBusinessById)
router.post('/:bid/product', addProduct)


export default router



src/routes/orders.router.js
import { Router } from "express";
import { getOrders, getOrderById, createOrder, resolveOrder } from '../controllers/orders.controller.js'

const router = Router()

router.get('/', getOrders)
router.post('/', createOrder)
router.get('/:oid', getOrderById)
router.put('/:oid', resolveOrder)

export default router



src/routes/users.router.js
import { Router } from "express";
import { getUsers, getUserById, saveUser } from '../controllers/users.controller.js'

const router = Router()

router.get('/', getUsers)
router.get('/:uid', getUserById)
router.post('/', saveUser)


export default router



.gitignore
node_modules


package.json
{
  "name": "arquitectura-completo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node --watch src/app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "mongoose": "^8.3.2"
  }
}


